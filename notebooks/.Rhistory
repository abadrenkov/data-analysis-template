clear
a <- 2 + 3 + 5
print(a)
99 -> a
a = a - 5
print(a)
quit()
library(data.table)
source('~/Desktop/Dropbox/AU and CPI data/Data_cleaning.R')
source('~/Desktop/Dropbox/AU and CPI data/Data_cleaning.R')
?uninstall
??uninstall
remove.packages("data.table")
library(datasets)
data(iris)
head(iris)
colMeans(,1)
colMeans(iris)
head(iris)
iris
?colMeans
colMeans(iris)
class(iris)
iris[,1]
iris['Sepal.Length']
iris[,1] -> a
iris$Sepal.Length -> b
identical a,b)
identical(a,b)
colMeans(a)
mean(a)
head(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean) -> a
a
class(a)
a[4]
a[,4]
a[1]
names(a)
a$4 - a$8
a$4
a['4']
a['4'] -> q
q
a
as.numeric(a)
as.numeric(a) -> q
q[1]
q[1] - q[3]
head(mtcars)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean) -> a
a
as.numeric(a) -> q
q[1] - q[3]
debug(ls)
ls
as.numberic
ls
class
class(a)
class
c
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
str(iris)
quit()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(1,2,3))
makeVector(1:5)
makeVector()
source('~/.active-rstudio-document')
makeCacheMatrix <- function(x=matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list( set = set, get = get,
setinverse = setinverse
getinverse = getinverse)
}
makeCacheMatrix <- function(x=matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list( set = set, get = get,
setinverse = setinverse
getinverse = getinverse)
}
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(solve) m <<- solve
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x=matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list( set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(matrix(1:4, nr=2))
makeCacheMatrix(matrix(1:4, nr=2)) -> a
a$set
a$get()
solve(a$get())
?solve
solve(a$get()) %*% a$get()
source('~/.active-rstudio-document')
makeCacheMatrix(matrix(c(4,3,3,2),nr=2))
makeCacheMatrix(matrix(c(4,3,3,2),nr=2)) -> a
a$get()
class(a$get())
class(a$get)
cacheinverse(a) -> b
b
# create a function that caches matrices
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){         					# defining matrices
x <<- y
m <<- NULL
}
get <- function() x     						# returns matrix
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list( set = set, get = get,					    # define functions in list
setinverse = setinverse,
getinverse = getinverse)
}
# Returns a matrix that is the inverse of the cached matrix
cacheSolve <- function(x, ...) {
m <- x$getinverse()           #query the x vector's cache
if(!is.null(m)) {             #if there is a cache
message("getting cached data")
return(m)                 #just return the cache
}
data <- x$get()               #if there's no cache
m <- solve(data)              #we actually compute them here
x$setinverse(m)               #save the result back to x's cache
m                             #return the result
}
a$getinverse()
quit()
setwd("~/Desktop/College/Junior_Year/Spring_2014/Stats_133/Project_2/data-analysis-template/notebooks")
head(cpi_silver)
source('~/Desktop/College/Junior_Year/Spring_2014/Stats_133/Project_2/data-analysis-template/notebooks/Data_Cleaning.R')
head(cpi_silver)
head(cpi_silver_table)
head(DFS)
head(cpi_silver_table)
head(cpi_silver_matrix)
View(cpi_silver_table)
View(DFS)
DFS <- as.data.frame(cpi_silver_table)
View(DFS)
View(DFS)
head(inflation_schange_matrix)
cpi_silver_matrix <- cbind(Date, CPI, Silver)
cpi_silver_table <- as.data.table(cpi_silver_matrix)
setkey(cpi_silver_table, Date, CPI, Silver)
DFS <- as.data.frame(cpi_silver_table)
#conversion of matrix from DT to DF (change in silver prices)
inflation_schange_matrix <- cbind(Date, Inflation, Change)
inflation_schange_table <- as.data.table(inflation_schange_matrix)
setkey(inflation_schange_table, Date, Inflation, Change)
DFSI <- as.data.frame(inflation_schange_table)
head(DFSI)
lapply(DFSI,class)
Silver_factor <- DFS$Silver
CPI_factor = DFS$CPI
Silver_numbers <- as.numeric(levels(Silver_factor)[as.integer(Silver_factor)])
CPI_numbers = as.numeric(levels(CPI_factor)[as.integer(CPI_factor)])
DateS <- levels(DFS$Date)[DFS$Date]
DateS <- as.Date(Date, "%m/%d/%Y")
DFS$Date = Date
DFS$Silver <- Silver_numbers
DFS$CPI = CPI_numbers
View(DFS)
lapply(DFS,class)
DFS$Date = DateS
lapply(DFS,class)
source('~/Desktop/College/Junior_Year/Spring_2014/Stats_133/Project_2/data-analysis-template/notebooks/Data_Cleaning.R')
View(DFSI)
View(DFS)
merge(DFS,DFSI, by="Date")
merge(DFS,DFSI, by="Date") -> a
head(a)
head(cpi_silver_matrix)
source('~/Desktop/College/Junior_Year/Spring_2014/Stats_133/Project_2/data-analysis-template/notebooks/Data_Cleaning.R')
System.time(source('~/Desktop/College/Junior_Year/Spring_2014/Stats_133/Project_2/data-analysis-template/notebooks/Data_Cleaning.R'))
system.time(source('~/Desktop/College/Junior_Year/Spring_2014/Stats_133/Project_2/data-analysis-template/notebooks/Data_Cleaning.R'))
factor(Schange_numbers)
identical(factor(Schange_numbers), Schange_factor)
Schange_factor
head(Schange_factor)
head(Schange_numbers)
head(factor(Schange_numbers)
)
View(Schange_factor, Schange_numbers)
View(Schange_factor); View(Schange_numbers)
?setkeys
?setkey
View(CFSI)
View(DFSI)
plot(DFSI$Inflation, DFSI$Change)
Year(DSFI$Date)
year(DSFI$Date)
?year
year(DSFI$Date)
?POSIXlt
as.POSIXlt(DSFI$Date)
library(lubridate)
year(DSFI$Date)
year(DFSI$Date)
plot(year(DFSI$Date),DFSI$Inflation)
plot(year(DFSI$Date),DFSI$Inflation, type="l")
line(year(DFSI$Date),DFSI$Change)
plot(year(DFSI$Date),DFSI$Inflation, type="n")
line(year(DFSI$Date),DFSI$Change, col="Green")
line(year(DFSI$Date),DFSI$Change, col="green")
line(year(DFSI$Date),DFSI$Change)
lines(year(DFSI$Date),DFSI$Change)
lines(year(DFSI$Date),DFSI$Inflation, col="red")
lines(year(DFSI$Date),DFSI$Change, col="blue")
lm(DFSI$Change~DFSI$Inflation)
lm(DFSI$Change~DFSI$Inflation) ->a
summary(a)
plot(year(DFSI$Date),DFSI$Inflation, type="n")
plot(year(DFGI$Date),DFGI$Inflation, type="n")
plot(year(DFGC$Date),DFGC$Inflation, type="n")
lines(DFGC$Date, DFGC$Inflation, col="blue")
lines(DFGC$Date, DFGC$Change, col="blue")
lines(DFGC$Date, DFGC$Change, col="red")
View(DFGC)
par(mfrow=c(1,2)
)
plot(year(DFSI$Date),DFSI$Inflation, type="n")
lines(year(DFSI$Date),DFSI$Inflation, col="red")
lines(year(DFSI$Date),DFSI$Change, col="blue")
plot(year(DFGC$Date),DFGC$Inflation, type="n")
lines(year(DFGC$Date),DFGC$Change, col="blue")
lines(year(DFGC$Date),DFGC$Inflation, col="red")
lines(year(DFGC$Date),DFGC$Change, col="blue")
title("Gold")
xtitle("Year")
xlabel("Year")
xlab("Year")
dev.off()
source('~/Desktop/College/Junior_Year/Spring_2014/Stats_133/Project_2/data-analysis-template/notebooks/Data_Cleaning.R')
#first change director to where the data is located
#can achieve this using the `setwd()` function
if(require(data.table)==FALSE)
install.packages("data.table")
library(data.table)
#grab csv files
a = paste(getwd(), "/*.csv", sep="")
b = Sys.glob(a)
c = lapply(b, fread)
#grab desired variables (gold)
cpi <- c[[1]]
gold <- c[[2]]
#matching available time frames (gold)
cpi_gold <- merge(cpi,gold, by="Date")
Date <- cpi_gold$Date
CPI <- cpi_gold$Close.x
Inflation <- cpi_gold$Inflation
Gold <- cpi_gold$Close.y
Change <- cpi_gold$Change
#conversion from matrix to DT to DF (gold prices)
cpi_gold_matrix <- cbind(Date, CPI, Gold)
cpi_gold_table <- as.data.table(cpi_gold_matrix)
setkey(cpi_gold_table, Date, CPI, Gold)
DFG <- as.data.frame(cpi_gold_table)
#conversion from matrix to DT to DF (changes in gold prices)
inflation_gchange_matrix = cbind(Date, Inflation, Change)
inflation_gchange_table = as.data.table(inflation_gchange_matrix)
setkey(inflation_gchange_table, Date, Inflation, Change)
DFGC = as.data.frame(inflation_gchange_table)
#conversion from factor to numeric (gold prices)
Gold_factor <- DFG$Gold
CPI_factor <- DFG$CPI
Gold_numbers <- as.numeric(levels(Gold_factor)[as.integer(Gold_factor)])
CPI_numbers <- as.numeric(levels(CPI_factor)[as.integer(CPI_factor)])
Date <- levels(DFG$Date)[DFG$Date]
Date <- as.Date(Date, "%m/%d/%Y")
DFG$Date <- Date
DFG$Gold <- Gold_numbers
DFG$CPI <- CPI_numbers
#conversion from factor to numeric (changes in gold prices)
Gchange_factor <- DFGC$Change
Inflation_factor <- DFGC$Inflation
Gchange_numbers <- as.numeric(levels(Gchange_factor)[as.integer(Gchange_factor)])
Inflation_numbers <- as.numeric(levels(Inflation_factor)[as.integer(Inflation_factor)])
Date <- levels(DFGC$Date)[DFGC$Date]
Date <- as.Date(Date, "%m/%d/%Y")
DFGC$Date <- Date
DFGC$Change <- Gchange_numbers
DFGC$Inflation <- Inflation_numbers
#grab desired variables (silver)
Silver <- c[[3]]
cpis <- c[[1]]
#match available time frames (silver)
cpi_silver = merge(cpis, Silver, by = "Date")
Date = cpi_silver$Date
CPI <- cpi_silver$Close.x
Inflation <- cpi_silver$Inflation
Silver <- cpi_silver$Close.y
Change <- cpi_silver$Change
#conversion of matrix from DT to DF (silver)
cpi_silver_matrix <- cbind(Date, CPI, Silver)
cpi_silver_table <- as.data.table(cpi_silver_matrix)
setkey(cpi_silver_table, Date, CPI, Silver)
DFS <- as.data.frame(cpi_silver_table)
#conversion of matrix from DT to DF (change in silver prices)
inflation_schange_matrix <- cbind(Date, Inflation, Change)
inflation_schange_table <- as.data.table(inflation_schange_matrix)
setkey(inflation_schange_table, Date, Inflation, Change)
DFSI <- as.data.frame(inflation_schange_table)
#conversion from factor to numeric (silver prices)
Silver_factor <- DFS$Silver
CPI_factor = DFS$CPI
Silver_numbers <- as.numeric(levels(Silver_factor)[as.integer(Silver_factor)])
CPI_numbers = as.numeric(levels(CPI_factor)[as.integer(CPI_factor)])
DateS <- levels(DFS$Date)[DFS$Date]
DateS <- as.Date(Date, "%m/%d/%Y")
DFS$Date = DateS
DFS$Silver <- Silver_numbers
DFS$CPI = CPI_numbers
#conversion from factor to numeric (change in silver prices)
Schange_factor <- DFSI$Change
Inflation_factor = DFSI$Inflation
Schange_numbers <- as.numeric(levels(Schange_factor)[as.integer(Schange_factor)])
Inflation_numbers = as.numeric(levels(Inflation_factor)[as.integer(Inflation_factor)])
DateS <- levels(DFSI$Date)[DFSI$Date]
DateS <- as.Date(Date, "%m/%d/%Y")
DFSI$Date = DateS
DFSI$Change <- Schange_numbers
DFSI$Inflation = Inflation_numbers
#can now use numberic values to run tests
par(mfrow=c(1,2))
#plot Gold
plot(year(DFGC$Date),DFGC$Inflation, type="n", xlab="Year", ylab="Changes")
lines(year(DFGC$Date),DFGC$Change, col="blue")
lines(year(DFGC$Date),DFGC$Inflation, col="red")
lines(year(DFGC$Date),DFGC$Change, col="blue")
title("Gold")
#plot Silver
plot(year(DFSI$Date),DFSI$Inflation, type="n", xlab="Year", ylab="Changes")
lines(year(DFSI$Date),DFSI$Inflation, col="red")
lines(year(DFSI$Date),DFSI$Change, col="blue")
#turn off side by side setting
dev.off()
source('~/.active-rstudio-document')
title("Silver")
dev.off()
